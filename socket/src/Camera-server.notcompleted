#include<stdio.h>
#include<stdlib.h>

#include <sys/socket.h> 
#include <sys/types.h> 
#include <unistd.h> // read(), write(), close(), sleep
#include<errno.h>
#include<netinet/in.h>
#include<string.h>
#include<pthread.h>

#include<stdint.h>
#include "UDPServer.h"

//run the local server until exit
static void run(UDPServer* self){
	int done=0;
	struct sockaddr_in client;
	socklen_t client_address_size = sizeof(client);
	
	while ( done>0 ){
		
		if(recvfrom(self->super->server_fd, self->super->recv_buff->buffer, self->super->recv_buff->size, 0, (struct sockaddr *) &client, &client_address_size) <0){
       		perror("recvfrom()");
       		exit(4);
   		}
   		
   		strcpy(self->send_buff->buffer, self->recv_buff->buffer);
   		strcat(self->send_buff->buffer, "ACKNOWLEDGED");
   		
   		if (sendto(self->server_fd, self->send_buff->buffer, strlen((char* )self->send_buff->buffer), 0,
                 (struct sockaddr *)&client, &client_address_size) < 0)
	   {
		   perror("sendto()");
		   exit(2);
	   }
	}
}

int main(int argc, char** argv){
	UDPServer* server=udp_server__new(INADDR_LOOPBACK, UDP_PORT);
	
	run(server);
	
	udp_server__destroy(&server);
	
	return 0;
}
